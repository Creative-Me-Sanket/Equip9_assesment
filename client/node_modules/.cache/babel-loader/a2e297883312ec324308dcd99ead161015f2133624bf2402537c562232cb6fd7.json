{"ast":null,"code":"const isLocalhost = Boolean(window.location.hostname === \"localhost\" || window.location.hostname === \"[::1]\" ||\n// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl);\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://goo.gl/SC7cgQ\");\n        });\n      } else {\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            console.log(\"New content is available; please refresh.\");\n          } else {\n            console.log(\"Content is cached for offline use.\");\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error(\"Error during service worker registration:\", error);\n  });\n}\nfunction checkValidServiceWorker(swUrl) {\n  fetch(swUrl).then(response => {\n    if (response.status === 404 || response.headers.get(\"content-type\").indexOf(\"javascript\") === -1) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      registerValidSW(swUrl);\n    }\n  }).catch(() => {\n    console.log(\"No internet connection found. App is running in offline mode.\");\n  });\n}\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","fetch","response","status","headers","get","indexOf","unregister","reload"],"sources":["D:/Equip9/assesment/assesment/client/src/registerServiceWorker.js"],"sourcesContent":["const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  fetch(swUrl)\n    .then((response) => {\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}